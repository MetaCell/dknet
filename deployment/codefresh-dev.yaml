version: '1.0'
stages:
- prepare
- build
- unittest
- deploy
- qa
- publish
steps:
  main_clone:
    title: Clone main repository
    type: git-clone
    stage: prepare
    repo: '${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}'
    revision: '${{CF_BRANCH}}'
    git: github
  post_main_clone:
    title: Post main clone
    type: parallel
    stage: prepare
    steps:
    - title: Cloning cloud-harness repository...
      type: git-clone
      stage: prepare
      repo: https://github.com/MetaCell/cloud-harness.git
      revision: '${{CLOUDHARNESS_BRANCH}}'
      working_directory: .
      git: github
  prepare_deployment:
    title: Prepare helm chart
    image: python:3.9.10
    stage: prepare
    working_directory: .
    commands:
    - bash cloud-harness/install.sh
    - harness-deployment cloud-harness . -t ${{CF_BUILD_ID}} -d ${{DOMAIN}} -r ${{REGISTRY}}
      -rs ${{REGISTRY_SECRET}} -n ${{NAMESPACE}} -e dev -i dknet
  prepare_deployment_view:
    commands:
    - helm template ./deployment/helm --debug -n ${{NAMESPACE}}
    environment:
    - ACTION=auth
    - KUBE_CONTEXT=${{NAMESPACE}}
    image: codefresh/cfstep-helm:3.6.2
    stage: prepare
    title: View helm chart
  build_base_images:
    title: Build base images
    type: parallel
    stage: build
    steps:
      cloudharness-base-debian:
        type: build
        stage: build
        tag: '${{CF_BUILD_ID}}'
        dockerfile: infrastructure/base-images/cloudharness-base-debian/Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - TAG=${{CF_BUILD_ID}}
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        image_name: cloudharness/cloudharness-base-debian
        title: Cloudharness base debian
        working_directory: ./cloud-harness
      cloudharness-frontend-build:
        type: build
        stage: build
        tag: '${{CF_BUILD_ID}}'
        dockerfile: infrastructure/base-images/cloudharness-frontend-build/Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - TAG=${{CF_BUILD_ID}}
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        image_name: cloudharness/cloudharness-frontend-build
        title: Cloudharness frontend build
        working_directory: ./cloud-harness
      cloudharness-base:
        type: build
        stage: build
        tag: '${{CF_BUILD_ID}}'
        dockerfile: infrastructure/base-images/cloudharness-base/Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - TAG=${{CF_BUILD_ID}}
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        image_name: cloudharness/cloudharness-base
        title: Cloudharness base
        working_directory: ./cloud-harness
  build_static_images:
    title: Build static images
    type: parallel
    stage: build
    steps:
      cloudharness-fastapi:
        type: build
        stage: build
        tag: '${{CF_BUILD_ID}}'
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - TAG=${{CF_BUILD_ID}}
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        - CLOUDHARNESS_BASE_DEBIAN=${{REGISTRY}}/cloudharness/cloudharness-base-debian:${{CF_BUILD_ID}}
        image_name: cloudharness/cloudharness-fastapi
        title: Cloudharness fastapi
        working_directory: ./cloud-harness/infrastructure/common-images/cloudharness-fastapi
      cloudharness-django:
        type: build
        stage: build
        tag: '${{CF_BUILD_ID}}'
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - TAG=${{CF_BUILD_ID}}
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        - CLOUDHARNESS_BASE_DEBIAN=${{REGISTRY}}/cloudharness/cloudharness-base-debian:${{CF_BUILD_ID}}
        image_name: cloudharness/cloudharness-django
        title: Cloudharness django
        working_directory: ./cloud-harness/infrastructure/common-images/cloudharness-django
      cloudharness-flask:
        type: build
        stage: build
        tag: '${{CF_BUILD_ID}}'
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - TAG=${{CF_BUILD_ID}}
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        - CLOUDHARNESS_BASE=${{REGISTRY}}/cloudharness/cloudharness-base:${{CF_BUILD_ID}}
        image_name: cloudharness/cloudharness-flask
        title: Cloudharness flask
        working_directory: ./cloud-harness/infrastructure/common-images/cloudharness-flask
  build_application_images:
    type: parallel
    stage: build
    steps:
      workflows:
        type: build
        stage: build
        tag: '${{CF_BUILD_ID}}'
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - TAG=${{CF_BUILD_ID}}
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        - CLOUDHARNESS_FLASK=${{REGISTRY}}/cloudharness/cloudharness-flask:${{CF_BUILD_ID}}
        image_name: cloudharness/workflows
        title: Workflows
        working_directory: ./cloud-harness/applications/workflows/server
      workflows-send-result-event:
        type: build
        stage: build
        tag: '${{CF_BUILD_ID}}'
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - TAG=${{CF_BUILD_ID}}
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        - CLOUDHARNESS_BASE=${{REGISTRY}}/cloudharness/cloudharness-base:${{CF_BUILD_ID}}
        image_name: cloudharness/workflows-send-result-event
        title: Workflows send result event
        working_directory: ./cloud-harness/applications/workflows/tasks/send-result-event
      workflows-extract-download:
        type: build
        stage: build
        tag: '${{CF_BUILD_ID}}'
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - TAG=${{CF_BUILD_ID}}
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        image_name: cloudharness/workflows-extract-download
        title: Workflows extract download
        working_directory: ./cloud-harness/applications/workflows/tasks/extract-download
      workflows-notify-queue:
        type: build
        stage: build
        tag: '${{CF_BUILD_ID}}'
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - TAG=${{CF_BUILD_ID}}
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        - CLOUDHARNESS_BASE=${{REGISTRY}}/cloudharness/cloudharness-base:${{CF_BUILD_ID}}
        image_name: cloudharness/workflows-notify-queue
        title: Workflows notify queue
        working_directory: ./cloud-harness/applications/workflows/tasks/notify-queue
      notifications:
        type: build
        stage: build
        tag: '${{CF_BUILD_ID}}'
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - TAG=${{CF_BUILD_ID}}
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        - CLOUDHARNESS_BASE=${{REGISTRY}}/cloudharness/cloudharness-base:${{CF_BUILD_ID}}
        image_name: cloudharness/notifications
        title: Notifications
        working_directory: ./cloud-harness/applications/notifications/server
      jupyterhub:
        type: build
        stage: build
        tag: '${{CF_BUILD_ID}}'
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - TAG=${{CF_BUILD_ID}}
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        - CLOUDHARNESS_BASE=${{REGISTRY}}/cloudharness/cloudharness-base:${{CF_BUILD_ID}}
        image_name: cloudharness/jupyterhub
        title: Jupyterhub
        working_directory: ./cloud-harness/applications/jupyterhub
      nfsserver:
        type: build
        stage: build
        tag: '${{CF_BUILD_ID}}'
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - TAG=${{CF_BUILD_ID}}
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        image_name: cloudharness/nfsserver
        title: Nfsserver
        working_directory: ./cloud-harness/applications/nfsserver
      common:
        type: build
        stage: build
        tag: '${{CF_BUILD_ID}}'
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - TAG=${{CF_BUILD_ID}}
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        - CLOUDHARNESS_FLASK=${{REGISTRY}}/cloudharness/cloudharness-flask:${{CF_BUILD_ID}}
        image_name: cloudharness/common
        title: Common
        working_directory: ./cloud-harness/applications/common/server
      samples:
        type: build
        stage: build
        tag: '${{CF_BUILD_ID}}'
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - TAG=${{CF_BUILD_ID}}
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        - CLOUDHARNESS_FRONTEND_BUILD=${{REGISTRY}}/cloudharness/cloudharness-frontend-build:${{CF_BUILD_ID}}
        - CLOUDHARNESS_FLASK=${{REGISTRY}}/cloudharness/cloudharness-flask:${{CF_BUILD_ID}}
        image_name: cloudharness/samples
        title: Samples
        working_directory: ./cloud-harness/applications/samples
      samples-sum:
        type: build
        stage: build
        tag: '${{CF_BUILD_ID}}'
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - TAG=${{CF_BUILD_ID}}
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        - CLOUDHARNESS_BASE=${{REGISTRY}}/cloudharness/cloudharness-base:${{CF_BUILD_ID}}
        image_name: cloudharness/samples-sum
        title: Samples sum
        working_directory: ./cloud-harness/applications/samples/tasks/sum
      samples-secret:
        type: build
        stage: build
        tag: '${{CF_BUILD_ID}}'
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - TAG=${{CF_BUILD_ID}}
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        - CLOUDHARNESS_BASE=${{REGISTRY}}/cloudharness/cloudharness-base:${{CF_BUILD_ID}}
        image_name: cloudharness/samples-secret
        title: Samples secret
        working_directory: ./cloud-harness/applications/samples/tasks/secret
      samples-print-file:
        type: build
        stage: build
        tag: '${{CF_BUILD_ID}}'
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - TAG=${{CF_BUILD_ID}}
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        - CLOUDHARNESS_BASE=${{REGISTRY}}/cloudharness/cloudharness-base:${{CF_BUILD_ID}}
        image_name: cloudharness/samples-print-file
        title: Samples print file
        working_directory: ./cloud-harness/applications/samples/tasks/print-file
      accounts:
        type: build
        stage: build
        tag: '${{CF_BUILD_ID}}'
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - TAG=${{CF_BUILD_ID}}
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        image_name: cloudharness/accounts
        title: Accounts
        working_directory: ./cloud-harness/applications/accounts
      sentry:
        type: build
        stage: build
        tag: '${{CF_BUILD_ID}}'
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - TAG=${{CF_BUILD_ID}}
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        image_name: cloudharness/sentry
        title: Sentry
        working_directory: ./cloud-harness/applications/sentry
      volumemanager:
        type: build
        stage: build
        tag: '${{CF_BUILD_ID}}'
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - TAG=${{CF_BUILD_ID}}
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        - CLOUDHARNESS_FLASK=${{REGISTRY}}/cloudharness/cloudharness-flask:${{CF_BUILD_ID}}
        image_name: cloudharness/volumemanager
        title: Volumemanager
        working_directory: ./cloud-harness/applications/volumemanager/server
      dknet:
        type: build
        stage: build
        tag: '${{CF_BUILD_ID}}'
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - TAG=${{CF_BUILD_ID}}
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        image_name: cloudharness/dknet
        title: Dknet
        working_directory: ./applications/dknet
  deployment:
    stage: deploy
    type: helm
    working_directory: ./${{CF_REPO_NAME}}
    title: Installing chart
    arguments:
      helm_version: 3.6.2
      chart_name: deployment/helm
      release_name: '${{NAMESPACE}}'
      kube_context: '${{CLUSTER_NAME}}'
      namespace: '${{NAMESPACE}}'
      chart_version: '${{CF_BUILD_ID}}'
      cmd_ps: --wait --timeout 600s
      custom_value_files:
      - ./deployment/helm/values.yaml
      custom_values: []
  build_test_images:
    title: Build test images
    type: parallel
    stage: qa
    steps: {}
    when:
      condition:
        all:
          whenVarExists: includes("${{SKIP_TESTS}}", "{{SKIP_TESTS}}") == true
  wait_deployment:
    stage: qa
    title: Wait deployment to be ready
    image: codefresh/kubectl
    commands:
    - kubectl config use-context ${{CLUSTER_NAME}}
    - kubectl config set-context --current --namespace=${{NAMESPACE}}
    - kubectl rollout status deployment/dknet
    - sleep 60
    when:
      condition:
        all:
          whenVarExists: includes("${{SKIP_TESTS}}", "{{SKIP_TESTS}}") == true
  approval:
    type: pending-approval
    stage: publish
    title: Approve build
    description: Approve build release and tagging
    timeout:
      duration: 168
      finalState: denied
  publish:
    type: parallel
    stage: publish
    steps:
      publish_cloudharness-base-debian:
        stage: publish
        type: push
        title: Cloudharness base debian
        candidate: '${{REGISTRY}}/cloudharness/cloudharness-base-debian:${{CF_BUILD_ID}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_cloudharness-frontend-build:
        stage: publish
        type: push
        title: Cloudharness frontend build
        candidate: '${{REGISTRY}}/cloudharness/cloudharness-frontend-build:${{CF_BUILD_ID}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_cloudharness-base:
        stage: publish
        type: push
        title: Cloudharness base
        candidate: '${{REGISTRY}}/cloudharness/cloudharness-base:${{CF_BUILD_ID}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_cloudharness-fastapi:
        stage: publish
        type: push
        title: Cloudharness fastapi
        candidate: '${{REGISTRY}}/cloudharness/cloudharness-fastapi:${{CF_BUILD_ID}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_cloudharness-django:
        stage: publish
        type: push
        title: Cloudharness django
        candidate: '${{REGISTRY}}/cloudharness/cloudharness-django:${{CF_BUILD_ID}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_cloudharness-flask:
        stage: publish
        type: push
        title: Cloudharness flask
        candidate: '${{REGISTRY}}/cloudharness/cloudharness-flask:${{CF_BUILD_ID}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_workflows:
        stage: publish
        type: push
        title: Workflows
        candidate: '${{REGISTRY}}/cloudharness/workflows:${{CF_BUILD_ID}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_workflows-send-result-event:
        stage: publish
        type: push
        title: Workflows send result event
        candidate: '${{REGISTRY}}/cloudharness/workflows-send-result-event:${{CF_BUILD_ID}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_workflows-extract-download:
        stage: publish
        type: push
        title: Workflows extract download
        candidate: '${{REGISTRY}}/cloudharness/workflows-extract-download:${{CF_BUILD_ID}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_workflows-notify-queue:
        stage: publish
        type: push
        title: Workflows notify queue
        candidate: '${{REGISTRY}}/cloudharness/workflows-notify-queue:${{CF_BUILD_ID}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_notifications:
        stage: publish
        type: push
        title: Notifications
        candidate: '${{REGISTRY}}/cloudharness/notifications:${{CF_BUILD_ID}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_jupyterhub:
        stage: publish
        type: push
        title: Jupyterhub
        candidate: '${{REGISTRY}}/cloudharness/jupyterhub:${{CF_BUILD_ID}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_nfsserver:
        stage: publish
        type: push
        title: Nfsserver
        candidate: '${{REGISTRY}}/cloudharness/nfsserver:${{CF_BUILD_ID}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_common:
        stage: publish
        type: push
        title: Common
        candidate: '${{REGISTRY}}/cloudharness/common:${{CF_BUILD_ID}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_samples:
        stage: publish
        type: push
        title: Samples
        candidate: '${{REGISTRY}}/cloudharness/samples:${{CF_BUILD_ID}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_samples-sum:
        stage: publish
        type: push
        title: Samples sum
        candidate: '${{REGISTRY}}/cloudharness/samples-sum:${{CF_BUILD_ID}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_samples-secret:
        stage: publish
        type: push
        title: Samples secret
        candidate: '${{REGISTRY}}/cloudharness/samples-secret:${{CF_BUILD_ID}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_samples-print-file:
        stage: publish
        type: push
        title: Samples print file
        candidate: '${{REGISTRY}}/cloudharness/samples-print-file:${{CF_BUILD_ID}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_accounts:
        stage: publish
        type: push
        title: Accounts
        candidate: '${{REGISTRY}}/cloudharness/accounts:${{CF_BUILD_ID}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_sentry:
        stage: publish
        type: push
        title: Sentry
        candidate: '${{REGISTRY}}/cloudharness/sentry:${{CF_BUILD_ID}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_volumemanager:
        stage: publish
        type: push
        title: Volumemanager
        candidate: '${{REGISTRY}}/cloudharness/volumemanager:${{CF_BUILD_ID}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_dknet:
        stage: publish
        type: push
        title: Dknet
        candidate: '${{REGISTRY}}/cloudharness/dknet:${{CF_BUILD_ID}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
    when:
      condition:
        all:
          whenVarExists: includes("${{DEPLOYMENT_PUBLISH_TAG}}", "{{DEPLOYMENT_PUBLISH_TAG}}")
            == false
